// <auto-generated />
using System;
using System.Collections.Generic;
using ApplicationGateway.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApplicationGateway.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220308103459_dto_tables_added")]
    partial class dto_tables_added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationGateway.Domain.Entities.ApiDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiDtos");
                });

            modelBuilder.Entity("ApplicationGateway.Domain.Entities.KeyDto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Policies")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("KeyDtos");
                });

            modelBuilder.Entity("ApplicationGateway.Domain.Entities.PolicyDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Apis")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("AuthType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PolicyDtos");
                });

            modelBuilder.Entity("ApplicationGateway.Domain.Entities.Snapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), null, null, null, null, null, null);

                    b.Property<string>("Comment")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gateway")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("character varying(450)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ObjectKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.ToTable("Snapshot", (string)null);
                });

            modelBuilder.Entity("ApplicationGateway.Domain.Entities.Transformer", b =>
                {
                    b.Property<Guid>("TransformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gateway")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransformerTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransformerId");

                    b.ToTable("Transformers");

                    b.HasData(
                        new
                        {
                            TransformerId = new Guid("b0788d2f-8003-43c1-92a4-edc76a7c5dde"),
                            CreatedDate = new DateTime(2022, 3, 8, 10, 34, 58, 909, DateTimeKind.Utc).AddTicks(2536),
                            Gateway = "Tyk",
                            TemplateName = "GETAPI_TEMPLATE",
                            TransformerTemplate = "{\r\n  \"apiId\": \"#valueof(api_id)\",\r\n  \"name\": \"#valueof(name)\",\r\n  \"listenPath\": \"#valueof(proxy.listen_path)\",\r\n  \"targetUrl\": \"#valueof(proxy.target_url)\",\r\n  \"rateLimit\": {\r\n    \"rate\": \"#valueof(global_rate_limit.rate)\",\r\n    \"per\": \"#valueof(global_rate_limit.per)\"\r\n  },\r\n  \"blacklist\": \"#valueof(blacklisted_ips)\",\r\n  \"whitelist\": \"#valueof(allowed_ips)\",\r\n  \"versioningInfo\": {\r\n    \"location\": \"#valueof(definition.location)\",\r\n    \"key\": \"#valueof(definition.key)\"\r\n  },\r\n  \"defaultVersion\": \"#valueof(version_data.default_version)\",\r\n  \"versions\": [\r\n    {\r\n      \"name\": \"string\",\r\n      \"overrideTarget\": \"string\"\r\n    }\r\n  ],\r\n  \"authType\": \"string\",\r\n  \"openidOptions\": {\r\n    \"providers\": null\r\n  },\r\n  \"loadBalancingTargets\": \"#valueof(target_list)\"\r\n}"
                        },
                        new
                        {
                            TransformerId = new Guid("31ea7c6d-d731-47c4-af4a-155baf2e2ed4"),
                            CreatedDate = new DateTime(2022, 3, 8, 10, 34, 58, 909, DateTimeKind.Utc).AddTicks(3538),
                            Gateway = "Tyk",
                            TemplateName = "CREATEAPI_TEMPLATE",
                            TransformerTemplate = "{\r\n  \"name\": \"#valueof(Name)\",\r\n  \"use_keyless\": true,\r\n  \"active\": true,\r\n  \"proxy\": {\r\n    \"listen_path\": \"#valueof(ListenPath)\",\r\n    \"target_url\": \"#valueof(TargetUrl)\",\r\n    \"strip_listen_path\": true\r\n  },\r\n  \"version_data\": {\r\n    \"not_versioned\": true,\r\n    \"default_version\": \"Default\",\r\n    \"versions\": {\r\n      \"Default\": {\r\n        \"name\": \"Default\",\r\n        \"use_extended_paths\": true\r\n      }\r\n    }\r\n  }\r\n}"
                        },
                        new
                        {
                            TransformerId = new Guid("3f243dd1-644e-410f-93d0-e7979be9d629"),
                            CreatedDate = new DateTime(2022, 3, 8, 10, 34, 58, 909, DateTimeKind.Utc).AddTicks(4500),
                            Gateway = "Tyk",
                            TemplateName = "UPDATEAPI_TEMPLATE",
                            TransformerTemplate = "{\r\n  \"name\": \"#valueof(Name)\",\r\n  \"api_id\": \"#valueof(ApiId)\",\r\n  \"use_keyless\": \"#ifcondition(#valueof($.AuthType),keyless,#toboolean(true),#toboolean(false))\",\r\n  \"use_basic\": \"#ifcondition(#valueof($.AuthType),basic,#toboolean(true),#toboolean(false))\",\r\n  \"use_standard_auth\": \"#ifcondition(#valueof($.AuthType),standard,#toboolean(true),#toboolean(false))\",\r\n  \"use_openid\": \"#ifcondition(#valueof($.AuthType),openid,#toboolean(true),#toboolean(false))\",\r\n  \"openid_options\": {\r\n    \"providers\": null,\r\n    \"segregate_by_client\": false\r\n  },\r\n  \"active\": true,\r\n  \"proxy\": {\r\n    \"listen_path\": \"#valueof(ListenPath)\",\r\n    \"target_url\": \"#valueof(TargetUrl)\",\r\n    \"strip_listen_path\": true,\r\n    \"enable_load_balancing\": \"#ifcondition(#length(#valueof($.LoadBalancingTargets)),0,#toboolean(false),#toboolean(true))\",\r\n    \"target_list\": \"#valueof(LoadBalancingTargets)\"\r\n  },\r\n  \"global_rate_limit\": {\r\n    \"rate\": \"#valueof(RateLimit.Rate)\",\r\n    \"per\": \"#valueof(RateLimit.Per)\"\r\n  },\r\n  \"disable_rate_limit\": \"#ifcondition(#valueof($.RateLimit),null,#toboolean(true),#toboolean(false))\",\r\n  \"enable_ip_whitelisting\": \"#ifcondition(#valueof($.Whitelist),null,#toboolean(false),#toboolean(true))\",\r\n  \"allowed_ips\": \"#valueof(Whitelist)\",\r\n  \"enable_ip_blacklisting\": \"#ifcondition(#valueof($.Blacklist),null,#toboolean(false),#toboolean(true))\",\r\n  \"blacklisted_ips\": \"#valueof(Blacklist)\",\r\n  \"definition\": {\r\n    \"location\": \"#valueof(VersioningInfo.Location)\",\r\n    \"key\": \"#valueof(VersioningInfo.Key)\",\r\n    \"strip_path\": \"#ifcondition(#valueof($.Key),null,#toboolean(false),#toboolean(true))\"\r\n  },\r\n  \"version_data\": {\r\n    \"not_versioned\": \"#ifcondition(#length(#valueof($.Versions)),0,#toboolean(true),#toboolean(false))\",\r\n    \"default_version\": \"#valueof(DefaultVersion)\",\r\n    \"versions\": {\r\n      \"Default\": {\r\n        \"name\": \"Default\",\r\n        \"use_extended_paths\": true,\r\n        \"override_target\": \"\"\r\n      }\r\n    }\r\n  },\r\n  \"CORS\": {\r\n    \"enable\": \"#valueof(Enable)\",\r\n    \"allowed_origins\": \"#valueof(Allowed_origins)\",\r\n    \"allowed_methods\": \"#valueof(Allowed_methods)\",\r\n    \"allowed_headers\": \"#valueof(Allowed_headers)\",\r\n    \"exposed_headers\": \"#valueof(Exposed_headers)\",\r\n    \"allow_credentials\": \"#valueof(Allow_credentials)\",\r\n    \"max_age\": \"#valueof(Max_age)\",\r\n    \"options_passthrough\": \"#valueof(Options_passthrough)\",\r\n    \"debug\": \"#valueof(Debug)\"\r\n  }\r\n}"
                        },
                        new
                        {
                            TransformerId = new Guid("c8a540f9-0601-4dfb-b4e6-4adac1d52123"),
                            CreatedDate = new DateTime(2022, 3, 8, 10, 34, 58, 909, DateTimeKind.Utc).AddTicks(5275),
                            Gateway = "Tyk",
                            TemplateName = "GETPOLICY_TEMPLATE",
                            TransformerTemplate = "{\r\n  \"policyId\": \"\",\r\n  \"APIs\": [],\r\n  \"active\": \"#valueof(active)\",\r\n  \"keysInactive \": \"#valueof(is_inactive)\",\r\n  \"name\": \"#valueof(name)\",\r\n  \"maxQuota\": \"#valueof(quota_max)\",\r\n  \"quotaRate\": \"#valueof(quota_renewal_rate)\",\r\n  \"rate\": \"#valueof(rate)\",\r\n  \"per\": \"#valueof(per)\",\r\n  \"throttleInterval\": \"#valueof(throttle_interval)\",\r\n  \"throttleRetries\": \"#valueof(throttle_retry_limit)\",\r\n  \"state\": \"#valueof(state)\",\r\n  \"tags\": \"#valueof(tags)\",\r\n  \"partitions\": \"#valueof(partitions)\"\r\n}"
                        },
                        new
                        {
                            TransformerId = new Guid("79ab4897-947c-4638-8d38-526ac28c5bfd"),
                            CreatedDate = new DateTime(2022, 3, 8, 10, 34, 58, 909, DateTimeKind.Utc).AddTicks(6186),
                            Gateway = "Tyk",
                            TemplateName = "POLICY_TEMPLATE",
                            TransformerTemplate = "{\r\n  \"access_rights\": {},\r\n  \"active\": \"#valueof(Active)\",\r\n  \"is_inactive \": \"#valueof(KeysInactive)\",\r\n  \"name\": \"#valueof(Name)\",\r\n  \"quota_max\": \"#valueof(MaxQuota)\",\r\n  \"quota_renewal_rate\": \"#valueof(QuotaRate)\",\r\n  \"rate\": \"#valueof(Rate)\",\r\n  \"per\": \"#valueof(Per)\",\r\n  \"throttle_interval\": \"#valueof(ThrottleInterval)\",\r\n  \"throttle_retry_limit\": \"#valueof(ThrottleRetries)\",\r\n  \"state\": \"#valueof(State)\",\r\n  \"tags\": \"#valueof(Tags)\",\r\n  \"key_expires_in\": \"#valueof(KeyExpiresIn)\",\r\n  \"partitions\": \"#valueof(Partitions)\"\r\n}"
                        },
                        new
                        {
                            TransformerId = new Guid("176d16be-6a5e-4914-8939-58cac1f7e0f0"),
                            CreatedDate = new DateTime(2022, 3, 8, 10, 34, 58, 909, DateTimeKind.Utc).AddTicks(7003),
                            Gateway = "Tyk",
                            TemplateName = "GETKEY_TEMPLATE",
                            TransformerTemplate = "{\r\n  \"KeyId\": \"#valueof(key)\",\r\n  \"Rate\": \"#valueof(rate)\",\r\n  \"Per\": \"#valueof(per)\",\r\n  \"ThrottleInterval\": \"#valueof(throttle_interval)\",\r\n  \"ThrottleRetries\": \"#valueof(throttle_retry_limit)\",\r\n  \"Expires\": \"#valueof(expires)\",\r\n  \"Quota\": \"#valueof(quota_max)\",\r\n  \"QuotaRenewalRate\": \"#valueof(quota_renewal_rate)\",\r\n  \"IsInActive\": \"#valueof(is_inactive)\",\r\n  \"AccessRights\": null,\r\n  \"Policies\": null\r\n}"
                        },
                        new
                        {
                            TransformerId = new Guid("63efdd05-a2b8-44f8-9589-86380a7052a1"),
                            CreatedDate = new DateTime(2022, 3, 8, 10, 34, 58, 909, DateTimeKind.Utc).AddTicks(7785),
                            Gateway = "Tyk",
                            TemplateName = "CREATEKEY_TEMPLATE",
                            TransformerTemplate = "{\r\n  \"rate\": \"#valueof(Rate)\",\r\n  \"per\": \"#valueof(Per)\",\r\n  \"expires\": \"#valueof(Expires)\",\r\n  \"quota_max\": \"#valueof(Quota)\",\r\n  \"quota_remaining\": \"#valueof(Quota)\",\r\n  \"quota_renewal_rate\": \"#valueof(QuotaRenewalRate)\",\r\n  \"throttle_interval\": \"#valueof(ThrottleInterval)\",\r\n  \"throttle_retry_limit\": \"#valueof(ThrottleRetries)\",\r\n  \"access_rights\": {},\r\n  \"apply_policies\": null\r\n}"
                        },
                        new
                        {
                            TransformerId = new Guid("d37832b5-8400-4a80-90b0-51b07dfaaf4a"),
                            CreatedDate = new DateTime(2022, 3, 8, 10, 34, 58, 909, DateTimeKind.Utc).AddTicks(8547),
                            Gateway = "Tyk",
                            TemplateName = "UPDATEKEY_TEMPLATE",
                            TransformerTemplate = "{\r\n  \"rate\": \"#valueof(Rate)\",\r\n  \"per\": \"#valueof(Per)\",\r\n  \"expires\": \"#valueof(Expires)\",\r\n  \"quota_max\": \"#valueof(Quota)\",\r\n  \"quota_remaining\": \"#valueof(Quota)\",\r\n  \"quota_renewal_rate\": \"#valueof(QuotaRenewalRate)\",\r\n  \"throttle_interval\": \"#valueof(ThrottleInterval)\",\r\n  \"throttle_retry_limit\": \"#valueof(ThrottleRetries)\",\r\n  \"is_inactive\": \"#valueof(IsInActive)\",\r\n  \"access_rights\": {},\r\n  \"apply_policies\": null\r\n}"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
